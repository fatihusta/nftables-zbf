#!/usr/sbin/nft -f

flush ruleset

include "/etc/nftables/zbf-vars.conf"

table inet filter {
	# Use 'jump base_checks' as required
	chain base_checks {
	        ct state {established, related} counter accept
	        ct state invalid counter drop
		icmp type { echo-request } counter accept
		icmpv6 type echo-request counter accept
		icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-advert} ip6 hoplimit 1 accept
		icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-advert} ip6 hoplimit 255 counter accept
    	}

	# Funnel traffic based on in-interface (don't change this section)
	chain input {
		type filter hook input priority 0; policy accept;
		iifname lo accept
		iifname vmap { $int_inside : jump Inside-to-Firewall, $int_outside : jump Outside-to-Firewall, $int_dmz : jump Dmz-to-Firewall }
		counter drop
	}

	chain output {
		type filter hook output priority 0; policy accept;
		oifname lo accept
		oifname vmap { $int_inside : jump Firewall-to-Inside, $int_outside : jump Firewall-to-Outside, $int_dmz : jump Firewall-to-Dmz }
		counter drop
	}

	chain forward {
		type filter hook forward priority 0; policy accept;
		iifname vmap { $int_inside : jump From-Inside, $int_outside : jump From-Outside, $int_dmz : jump From-Dmz }
		counter drop
	}

	# Funnel traffic based on out-interface (don't change this section)
	chain From-Inside {
		oifname vmap { $int_outside : jump Inside-to-Outside, $int_dmz : jump Inside-to-Dmz, $int_inside : jump Intra-Zone-Traffic-Inside }
		counter drop
	}
	chain From-Outside {
		oifname vmap { $int_inside : jump Outside-to-Inside, $int_dmz : jump Outside-to-Dmz,  $int_outside : jump Intra-Zone-Traffic-Outside }
		counter drop
	}
	chain From-Dmz {
		oifname vmap { $int_outside : jump Dmz-to-Outside, $int_inside : jump Dmz-to-Inside, $int_dmz : jump Intra-Zone-Traffic-Dmz}
		counter drop
	}

	#INTRA SECURITY ZONE TRAFFIC (defaults, change as required)
	chain Intra-Zone-Traffic-Inside {
		counter accept
	}
	chain Intra-Zone-Traffic-Outside {
		counter accept
	}
	chain Intra-Zone-Traffic-Dmz {
		counter accept
	}

	set tcp_accepted {
		type inet_service; flags interval;
		elements = { $tcp_accepted_ports_content }
	}

	set udp_accepted {
		type inet_service; flags interval;
		elements = { $udp_accepted_ports_content }
	}

	#INTER SECURITY ZONE DEFAULT TRAFFIC RULES (zone-to-zone traffic. Change as required)
	chain Inside-to-Outside {
		ct state { new, established, related } counter accept
                counter drop
	}

        chain Inside-to-Dmz {
		ct state new counter accept
                counter drop
        }

        chain Outside-to-Inside {
		ip daddr $reverse_proxy ct status dnat counter accept
		ct state {established, related} counter accept
		counter drop
        }

        chain Outside-to-Dmz {
		ct state {established, related} counter accept
                counter drop
        }

        chain Dmz-to-Inside {
		ct state {established, related} counter accept
                counter drop
        }

        chain Dmz-to-Outside {
		ct state new counter accept
        }

        chain Inside-to-Firewall {
		ct state { new, established, related } counter accept
        }

        chain Outside-to-Firewall {
		jump base_checks
		ct state new tcp dport @tcp_accepted counter accept
		ct state new udp dport @udp_accepted counter accept
		counter log prefix "Drop_Outside-to-Firewall: " limit rate 3/second drop
        }

        chain Dmz-to-Firewall {
		ct state new counter accept
        }

        chain Firewall-to-Inside {
		counter accept
        }

        chain Firewall-to-Outside {
		ip protocol icmp counter accept
		ct state {established, related} counter accept
		ct state new counter accept
        }

        chain Firewall-to-Dmz {
		ct state new counter accept
        }

	### DEFENSIVE RULES

	set whitelist { type ipv4_addr; flags timeout; elements={$whitelist_content}}
	set blacklist { type ipv4_addr; flags timeout; elements={$blacklist_content}}
	set tcp_scan_ports { type inet_service; flags interval; elements={$tcp_scan_ports_content}}
	set udp_scan_ports { type inet_service; flags interval; elements={$udp_scan_ports_content}}
	# nft list set inet filter blacklist

	chain raw {
		type filter hook prerouting priority -300;

		# Enforce the Cliff Honeypot rules
		ip saddr @whitelist counter accept
		ip saddr @blacklist counter drop
	}

	chain mangle {
		type filter hook prerouting priority -150; policy accept;

		# The Cliff Honeypot rules
#		ct state { new } ip saddr != @whitelist tcp dport @tcp_scan_ports set add ip saddr @blacklist log prefix "BLACKLIST add: " limit rate 3/second drop
#		ct state { new } ip saddr != @whitelist udp dport @udp_scan_ports set add ip saddr @blacklist log prefix "BLACKLIST add: " limit rate 3/second drop
	}


}

table ip nat {
	chain prerouting {
        	type nat hook prerouting priority 0;

		# Port forward
		tcp dport { 80, 443 } counter dnat $reverse_proxy
		udp dport { 1094 } counter dnat $reverse_proxy

	}
	chain postrouting {
        	type nat hook postrouting priority 100;

		# Overload outside interface
        	oifname { $int_outside } counter masquerade
	}
}

